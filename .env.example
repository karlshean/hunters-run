# ================================================================
# Hunters Run - Environment Configuration
# ================================================================
# This file contains all environment variables used by the application.
# Copy this file to .env and update values as needed for your environment.
# 
# Quick Start: The default values work for local development!
# Just run: cp .env.example .env
# ================================================================

# ----------------------------------------------------------------
# API Server Configuration
# ----------------------------------------------------------------

# Port where the NestJS API server will listen
# Default: 3000 (change if port conflict)
PORT=3000

# Environment mode - affects logging, error details, and optimizations
# Options: development | staging | production
# Default: development (verbose logging, detailed errors)
NODE_ENV=development

# Logging verbosity level
# Options: error | warn | info | debug | verbose
# Default: info (balanced logging for development)
LOG_LEVEL=info

# ----------------------------------------------------------------
# Database Configuration
# ----------------------------------------------------------------

# PostgreSQL connection string for the main database
# Format: postgres://[user]:[password]@[host]:[port]/[database]
# Docker default: postgres://postgres:postgres@localhost:5432/unified
# Production: Use connection pooling and SSL (add ?sslmode=require)
DATABASE_URL=postgres://postgres:postgres@localhost:5432/unified

# Redis connection URL for caching and session management
# Format: redis://[password@][host]:[port][/database]
# Docker default: redis://localhost:6379
# Production: Use Redis Cluster or Elasticache
REDIS_URL=redis://localhost:6379

# Redis connection details (used by some modules that need separate config)
# These should match the REDIS_URL above
REDIS_HOST=localhost
REDIS_PORT=6379

# ----------------------------------------------------------------
# Multi-Tenant Configuration
# ----------------------------------------------------------------

# Default organization ID for demo and testing
# This is the seeded demo organization that CEO validation expects
# DO NOT CHANGE for local development - tests depend on this ID
DEFAULT_ORG_ID=00000000-0000-4000-8000-000000000001

# ----------------------------------------------------------------
# Firebase Authentication (Optional)
# ----------------------------------------------------------------
# Only needed if using Firebase Auth instead of built-in auth
# Leave defaults for local development - not required for demo

# Firebase project identifier
# Get from: Firebase Console > Project Settings
FIREBASE_PROJECT_ID=your-project-id

# Service account email for Firebase Admin SDK
# Get from: Firebase Console > Project Settings > Service Accounts
FIREBASE_CLIENT_EMAIL=your-service-account@your-project.iam.gserviceaccount.com

# Private key for Firebase service account (keep secure!)
# Get from: Firebase Console > Project Settings > Service Accounts > Generate Key
# Note: In .env file, replace literal \n with actual newlines
FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\nyour-private-key\n-----END PRIVATE KEY-----\n"

# ----------------------------------------------------------------
# Stripe Payment Processing
# ----------------------------------------------------------------
# Test keys for local development - these won't charge real cards
# Get your keys from: https://dashboard.stripe.com/test/apikeys

# Secret key for server-side Stripe API calls
# Starts with: sk_test_ (test mode) or sk_live_ (production)
# NEVER commit production keys to version control!
STRIPE_SECRET_KEY=sk_test_xxx

# Publishable key for client-side Stripe.js
# Starts with: pk_test_ (test mode) or pk_live_ (production)
# Safe to expose in frontend code
STRIPE_PUBLISHABLE_KEY=pk_test_xxx

# Webhook endpoint secret for validating Stripe webhook signatures
# Get from: Stripe Dashboard > Webhooks > Your endpoint > Signing secret
# Starts with: whsec_
# Critical for security - validates webhooks are from Stripe
STRIPE_WEBHOOK_SECRET=whsec_xxx

# ----------------------------------------------------------------
# Development & Testing Flags
# ----------------------------------------------------------------

# WARNING: Development only! Disables Stripe webhook signature validation
# Allows testing webhooks without valid signatures (e.g., in CI/CD)
# Options: true | false
# MUST be false in production for security!
ALLOW_INSECURE_STRIPE_WEBHOOK_TEST=true

# ----------------------------------------------------------------
# Feature Flags
# ----------------------------------------------------------------

# Enable/disable tenant photo flow feature
# Options: true | false | 1 | 0 | yes | no
# Default: false (disabled by default for gradual rollout)
TENANT_PHOTO_FLOW_ENABLED=false

# ----------------------------------------------------------------
# Web UI Configuration
# ----------------------------------------------------------------

# Port where the Vite dev server runs the React frontend
# Default: 3001 (different from API port to avoid conflicts)
# Note: Vite may auto-increment if port is taken (3002, 3003, etc.)
WEB_PORT=3001

# Allowed CORS origin for API requests from the web UI
# Must match the actual URL where your frontend is served
# Multiple origins: Use comma-separated list or implement dynamic CORS
# Production: Use your actual domain (https://app.yourdomain.com)
CORS_ORIGIN=http://localhost:3001

# ================================================================
# Additional Production Considerations (not in .env.example)
# ================================================================
# 
# These should be added for production deployments:
#
# JWT_SECRET=<random-256-bit-key>           # For JWT token signing
# SESSION_SECRET=<random-256-bit-key>       # For session encryption
# 
# AWS_REGION=us-east-1                      # For S3 file uploads (photo-first workflow)
# AWS_ACCESS_KEY_ID=<your-key>              # Required for production photo uploads
# AWS_SECRET_ACCESS_KEY=<your-secret>       # Keep secure! Never commit real keys
# AWS_S3_BUCKET=hunters-run-uploads         # S3 bucket for tenant photo uploads
#
# SENTRY_DSN=https://xxx@sentry.io/xxx      # Error tracking
# 
# SMTP_HOST=smtp.sendgrid.net               # Email configuration
# SMTP_PORT=587
# SMTP_USER=apikey
# SMTP_PASS=<sendgrid-api-key>
# FROM_EMAIL=noreply@yourdomain.com
#
# TWILIO_ACCOUNT_SID=<your-sid>             # SMS notifications
# TWILIO_AUTH_TOKEN=<your-token>
# TWILIO_PHONE_NUMBER=+1234567890
#
# RATE_LIMIT_MAX=100                        # API rate limiting
# RATE_LIMIT_WINDOW_MS=60000
#
# ================================================================