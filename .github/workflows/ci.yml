name: CI

on:
  push:
    branches: [ main, feat/*, chore/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Verify
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: unified
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for services to be ready
        run: |
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping | grep -q PONG; do sleep 1; done'

      - name: Run migrations and seed data
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/unified
          REDIS_URL: redis://localhost:6379
        run: |
          npm run migrate
          npm run seed:local

      - name: Validate seed data integrity
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/unified
        run: npm run ceo:seed-check
        continue-on-error: true  # Seed check may fail in CI due to connection issues

      - name: TypeScript type checking
        run: npm run typecheck

      - name: Build all workspaces
        run: npm run build --workspaces --if-present

      - name: Run unit tests
        run: npm run test:hr -- --runInBand
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/unified
          REDIS_URL: redis://localhost:6379

      - name: Run security tests
        run: npm run -w apps/hr-api test -- --testPathPattern=security
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/unified
          REDIS_URL: redis://localhost:6379

      - name: Generate OpenAPI spec
        run: npm run openapi:generate
        continue-on-error: true
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/unified
          REDIS_URL: redis://localhost:6379

      - name: Test health endpoints
        run: |
          echo "Testing /api/ready endpoint..."
          curl -f http://localhost:3000/api/ready || exit 1
          echo "✅ /api/ready OK"
          
          echo "Testing /api/health/ready endpoint..."
          curl -f http://localhost:3000/api/health/ready || exit 1
          echo "✅ /api/health/ready OK"
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/unified
          REDIS_URL: redis://localhost:6379

      - name: Run smoke tests
        run: npm run smoke
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/unified
          REDIS_URL: redis://localhost:6379

      - name: Run payments e2e tests
        run: npm run test:payments:e2e
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/unified
          REDIS_URL: redis://localhost:6379
          STRIPE_SECRET_KEY: sk_test_fake_key_for_testing
          STRIPE_WEBHOOK_SECRET: whsec_fake_secret_for_testing
          ALLOW_INSECURE_STRIPE_WEBHOOK_TEST: true

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage
          path: coverage/

      - name: Upload OpenAPI spec
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: openapi
          path: apps/hr-api/openapi.json
          if-no-files-found: ignore

      - name: Upload Postman collection
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: postman
          path: postman/hunters-run.postman_collection.json

      - name: Upload e2e report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-report
          path: reports/e2e.html

  ceo-validation:
    name: CEO Validation
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: unified
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run migrations and seed CEO demo data
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/unified
        run: |
          npm run migrate
          npm run seed

      - name: Start API server
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/unified
          REDIS_URL: redis://localhost:6379
          ALLOW_INSECURE_STRIPE_WEBHOOK_TEST: true
        run: |
          npm run dev:hr &
          sleep 15  # Wait for API to be ready

      - name: Run CEO validation
        run: npm run ceo:validate:sh

      - name: CEO validation must pass
        if: failure()
        run: |
          echo "❌ CEO validation failed!"
          echo "The CEO validation script must pass before merging."
          exit 1

  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: unified
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run migrations and seed test data
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/unified
        run: |
          npm run migrate
          psql "$DATABASE_URL" -f packages/db/seeds/ceo-demo-data.sql

      - name: Run security tests
        run: npm run test:security
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/unified
          REDIS_URL: redis://localhost:6379

      - name: Security tests must pass
        if: failure()
        run: |
          echo "❌ Security tests failed!"
          echo "Multi-tenant isolation and RLS policies must be correct."
          exit 1