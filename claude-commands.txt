[2025-09-01 10:12 ET] ADHD App — Zip Export CCC (copy-paste for Claude Code)
Goal: one-shot script to collect everything I need (ADHD bot + platform schemas/config) into a single redacted ZIP.
Secrets safe: the script copies .env and Firebase service JSON only after masking sensitive values.
Run from: your ADHD bot repo root. If your shared platform lives elsewhere, set the PLATFORM_DIR variable (both variants show how).

Option A — Windows PowerShell (recommended on Windows) — Fully AI-Executable
# === CCC-EXPORT-PLATFORM-ADHD.ps1 ===
# Run from the ADHD bot repository root (PowerShell). Requires no admin rights.

$ErrorActionPreference = "Stop"

# 0) Config — set PLATFORM_DIR if your shared platform SQL/RLS lives elsewhere
$ROOT = (Get-Location).Path
$PLATFORM_DIR = if ($env:PLATFORM_DIR -and (Test-Path $env:PLATFORM_DIR)) { $env:PLATFORM_DIR } else { $null }

# 1) Stamp + paths
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$exportName = "adhd_platform_export_$timestamp"
$TMP = Join-Path $env:TEMP $exportName
$OUTDIR = $TMP
$OUTZIP = Join-Path ([Environment]::GetFolderPath('Desktop')) ("adhd_platform_bundle_$timestamp.zip")

# Clean temp
if (Test-Path $OUTDIR) { Remove-Item -Recurse -Force $OUTDIR }
New-Item -ItemType Directory -Force -Path $OUTDIR | Out-Null
New-Item -ItemType Directory -Force -Path "$OUTDIR\adhd" | Out-Null
New-Item -ItemType Directory -Force -Path "$OUTDIR\platform" | Out-Null
New-Item -ItemType Directory -Force -Path "$OUTDIR\docs" | Out-Null

function Copy-TreeSafe {
  param([string]$Src, [string]$Dst)
  robocopy $Src $Dst /E /NFL /NDL /NJH /NJS /NP `
    /XF "*.sqlite" "*.log" ".DS_Store" `
    /XD "node_modules" ".git" "dist" "build" ".turbo" ".next" ".cache" "coverage" | Out-Null
}

function Mask-EnvFile {
  param([string]$Src, [string]$Dst)
  $lines = Get-Content -LiteralPath $Src -Raw -ErrorAction SilentlyContinue
  if ($null -eq $lines) { return }
  $masked = ($lines -split "`n") | ForEach-Object {
    if ($_ -match '^\s*([A-Za-z_][A-Za-z0-9_]*)\s*=\s*(.*)$') {
      "$($matches[1])=***REDACTED***"
    } else { $_ }
  }
  $masked | Set-Content -LiteralPath $Dst -NoNewline
}

function Mask-JsonSecrets {
  param([string]$Src, [string]$Dst)
  try {
    $obj = Get-Content -LiteralPath $Src -Raw | ConvertFrom-Json
  } catch {
    # Fallback: naive masking of common fields
    (Get-Content -LiteralPath $Src -Raw) `
      -replace '"private_key"\s*:\s*".*?"','"private_key":"***REDACTED***"' `
      -replace '"client_email"\s*:\s*".*?"','"client_email":"***REDACTED***"' `
      -replace '"private_key_id"\s*:\s*".*?"','"private_key_id":"***REDACTED***"' `
      | Set-Content -LiteralPath $Dst -NoNewline
    return
  }
  $fieldsToMask = @("private_key","client_email","private_key_id","client_id","refresh_token","api_key","token")
  foreach ($k in $fieldsToMask) { if ($obj.PSObject.Properties.Name -contains $k) { $obj.$k = "***REDACTED***" } }
  ($obj | ConvertTo-Json -Depth 20) | Set-Content -LiteralPath $Dst -NoNewline
}

Write-Host "=== Step 1: Copy ADHD repo (sources, sql, configs) ===" -ForegroundColor Cyan
# Core project files
$adhdDst = "$OUTDIR\adhd"
Copy-Item package.json,package-lock.json,yarn.lock,pnpm-lock.yaml -Destination $adhdDst -ErrorAction SilentlyContinue
Copy-Item README* -Destination $adhdDst -ErrorAction SilentlyContinue
Copy-Item Dockerfile*,docker-compose*.yml -Destination $adhdDst -ErrorAction SilentlyContinue
# Trees
foreach ($dir in @("src","scripts","sql","config","data")) {
  if (Test-Path $dir) { Copy-TreeSafe -Src (Resolve-Path $dir) -Dst (Join-Path $adhdDst $dir) }
}
# Exclude sqlite binaries
Get-ChildItem -Path "$adhdDst\data" -Filter *.sqlite -Recurse -ErrorAction SilentlyContinue | Remove-Item -Force -ErrorAction SilentlyContinue

# .env handling
if (Test-Path ".env.example") { Copy-Item ".env.example" -Destination "$adhdDst\.env.example" }
if (Test-Path ".env") { Mask-EnvFile -Src ".env" -Dst "$adhdDst\.env.redacted" }

# Firebase / service JSON (mask)
Get-ChildItem -Recurse -Include "*service*.json","*firebase*.json","*credentials*.json" -ErrorAction SilentlyContinue | ForEach-Object {
  $rel = $_.FullName.Substring($ROOT.Length).TrimStart('\','/')
  $dst = Join-Path $adhdDst ("redacted_" + ($rel -replace '[\\/:]','_'))
  Mask-JsonSecrets -Src $_.FullName -Dst $dst
}

Write-Host "=== Step 2: Collect Platform SQL / RLS / Audit ===" -ForegroundColor Cyan
function Copy-PlatformFrom {
  param([string]$Base)
  if (-not (Test-Path $Base)) { return }
  # Likely locations
  foreach ($dir in @("sql","db","database","migrations","policies","rls","audit")) {
    $p = Join-Path $Base $dir
    if (Test-Path $p) { Copy-TreeSafe -Src (Resolve-Path $p) -Dst (Join-Path "$OUTDIR\platform" $dir) }
  }
  # Compose/Docker + READMEs
  Copy-Item (Join-Path $Base "Dockerfile*") -Destination "$OUTDIR\platform" -ErrorAction SilentlyContinue
  Copy-Item (Join-Path $Base "docker-compose*.yml") -Destination "$OUTDIR\platform" -ErrorAction SilentlyContinue
  Get-ChildItem -Path $Base -Filter "README*" -File -ErrorAction SilentlyContinue | Copy-Item -Destination "$OUTDIR\platform"
}

if ($PLATFORM_DIR) {
  Write-Host "Using PLATFORM_DIR=$PLATFORM_DIR" -ForegroundColor Yellow
  Copy-PlatformFrom -Base $PLATFORM_DIR
} else {
  Write-Host "No PLATFORM_DIR provided. Attempting autodetect in parent folders..." -ForegroundColor Yellow
  $candidates = Get-ChildItem .. -Directory -ErrorAction SilentlyContinue |
    Where-Object { Test-Path (Join-Path $_.FullName "sql") -or Test-Path (Join-Path $_.FullName "db") }
  foreach ($cand in $candidates) { Copy-PlatformFrom -Base $cand.FullName }
}

Write-Host "=== Step 3: Docs & Evidence (optional) ===" -ForegroundColor Cyan
# Session logs / proofs if present
foreach ($f in @("SESSION_LOG_EXTRACT.md","COMPREHENSIVE_FIX_PROOF.md","DEPLOY_CHECKS.md","security-proof.md","whoami.md","proof-pack.md")) {
  if (Test-Path $f) { Copy-Item $f -Destination "$OUTDIR\docs" -ErrorAction SilentlyContinue }
}

Write-Host "=== Step 4: Create ZIP on Desktop ===" -ForegroundColor Cyan
if (Test-Path $OUTZIP) { Remove-Item $OUTZIP -Force }
Compress-Archive -Path "$OUTDIR\*" -DestinationPath $OUTZIP -Force

Write-Host ""
Write-Host "✅ Export complete:" -ForegroundColor Green
Write-Host "ZIP: $OUTZIP"
Write-Host "Temp export folder (safe to delete): $OUTDIR"
How to run:
Open PowerShell in your ADHD repo root.


If your platform SQL/RLS lives elsewhere, set the variable for this session:


$env:PLATFORM_DIR="C:\path\to\your\platform-repo"
Run:


Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
.\CCC-EXPORT-PLATFORM-ADHD.ps1

Option B — Bash (macOS/Linux/Raspberry Pi) — Fully AI-Executable
#!/usr/bin/env bash
# === ccc-export-platform-adhd.sh ===
set -euo pipefail

# 0) Config — set PLATFORM_DIR if shared platform SQL/RLS elsewhere
ROOT="$(pwd)"
PLATFORM_DIR="${PLATFORM_DIR:-}"
timestamp="$(date +%Y%m%d_%H%M%S)"
exportName="adhd_platform_export_${timestamp}"
TMP="${TMPDIR:-/tmp}/${exportName}"
OUTDIR="$TMP"
OUTZIP="$HOME/Desktop/adhd_platform_bundle_${timestamp}.zip"

rm -rf "$OUTDIR" && mkdir -p "$OUTDIR/adhd" "$OUTDIR/platform" "$OUTDIR/docs"

copy_tree_safe () {
  src="$1"; dst="$2"
  rsync -a "$src"/ "$dst"/ \
    --exclude node_modules --exclude .git --exclude dist --exclude build \
    --exclude .next --exclude .cache --exclude coverage --exclude '*.sqlite' --exclude '.DS_Store' || true
}

mask_env () {
  src="$1"; dst="$2"
  awk '{
    if ($0 ~ /^[ \t]*[A-Za-z_][A-Za-z0-9_]*[ \t]*=/) {
      split($0,a,"=");
      print a[1] "=***REDACTED***"
    } else { print $0 }
  }' "$src" > "$dst"
}

mask_json () {
  src="$1"; dst="$2"
  python3 - <<'PY' "$src" "$dst" || true
import json,sys
src,dst=sys.argv[1],sys.argv[2]
try:
  with open(src,'r',encoding='utf-8') as f: data=json.load(f)
  for k in ["private_key","client_email","private_key_id","client_id","refresh_token","api_key","token"]:
    if k in data: data[k]="***REDACTED***"
  with open(dst,'w',encoding='utf-8') as f: json.dump(data,f,indent=2)
except Exception:
  import re
  txt=open(src,'r',encoding='utf-8').read()
  txt=re.sub(r'"private_key"\s*:\s*".*?"','"private_key":"***REDACTED***"',txt)
  txt=re.sub(r'"client_email"\s*:\s*".*?"','"client_email":"***REDACTED***"',txt)
  txt=re.sub(r'"private_key_id"\s*:\s*".*?"','"private_key_id":"***REDACTED***"',txt)
  open(dst,'w',encoding='utf-8').write(txt)
PY
}

echo "=== Step 1: Copy ADHD repo (sources, sql, configs) ==="
cp -f package.json "$OUTDIR/adhd/" 2>/dev/null || true
cp -f package-lock.json yarn.lock pnpm-lock.yaml "$OUTDIR/adhd/" 2>/dev/null || true
cp -f README* "$OUTDIR/adhd/" 2>/dev/null || true
cp -f Dockerfile* docker-compose*.yml "$OUTDIR/adhd/" 2>/dev/null || true

for d in src scripts sql config data; do
  [ -d "$d" ] && mkdir -p "$OUTDIR/adhd/$d" && copy_tree_safe "$d" "$OUTDIR/adhd/$d"
done
find "$OUTDIR/adhd/data" -name '*.sqlite' -delete 2>/dev/null || true

[ -f ".env.example" ] && cp -f ".env.example" "$OUTDIR/adhd/.env.example"
[ -f ".env" ] && mask_env ".env" "$OUTDIR/adhd/.env.redacted"

# Firebase / service JSON (mask)
while IFS= read -r -d '' f; do
  rel="${f#$ROOT/}"
  dst="$OUTDIR/adhd/redacted_${rel//\//_}"
  mkdir -p "$(dirname "$dst")"
  mask_json "$f" "$dst"
done < <(find . -type f $begin:math:text$ -iname '*service*.json' -o -iname '*firebase*.json' -o -iname '*credentials*.json' $end:math:text$ -print0)

echo "=== Step 2: Collect Platform SQL / RLS / Audit ==="
copy_platform_from () {
  base="$1"
  [ -d "$base" ] || return 0
  for dir in sql db database migrations policies rls audit; do
    [ -d "$base/$dir" ] && mkdir -p "$OUTDIR/platform/$dir" && copy_tree_safe "$base/$dir" "$OUTDIR/platform/$dir"
  done
  cp -f "$base"/Dockerfile* "$OUTDIR/platform/" 2>/dev/null || true
  cp -f "$base"/docker-compose*.yml "$OUTDIR/platform/" 2>/dev/null || true
  find "$base" -maxdepth 1 -type f -name 'README*' -exec cp -f {} "$OUTDIR/platform/" \; 2>/dev/null || true
}

if [ -n "$PLATFORM_DIR" ] && [ -d "$PLATFORM_DIR" ]; then
  echo "Using PLATFORM_DIR=$PLATFORM_DIR"
  copy_platform_from "$PLATFORM_DIR"
else
  echo "No PLATFORM_DIR provided. Attempting autodetect in parent folders..."
  for cand in ../* ../*/*; do
    [ -d "$cand" ] || continue
    [ -d "$cand/sql" ] || [ -d "$cand/db" ] || continue
    copy_platform_from "$cand"
  done
fi

echo "=== Step 3: Docs & Evidence (optional) ==="
for f in SESSION_LOG_EXTRACT.md COMPREHENSIVE_FIX_PROOF.md DEPLOY_CHECKS.md security-proof.md whoami.md proof-pack.md; do
  [ -f "$f" ] && cp -f "$f" "$OUTDIR/docs/" || true
done

echo "=== Step 4: Create ZIP on Desktop ==="
mkdir -p "$(dirname "$OUTZIP")"
(cd "$OUTDIR/.." && zip -qr "$OUTZIP" "$(basename "$OUTDIR")")

echo
echo "✅ Export complete"
echo "ZIP: $OUTZIP"
echo "Temp export folder (safe to delete): $OUTDIR"
How to run:
# From your ADHD repo root:
export PLATFORM_DIR="/path/to/your/platform-repo"   # optional if autodetect works
bash ccc-export-platform-adhd.sh

What goes into the ZIP
ADHD bot: package.json, lockfiles, src/, scripts/, sql/, config/, data/ (but no .sqlite files), Dockerfile*, docker-compose*.yml, README*, .env.example, and .env.redacted.


Platform: sql/, db/, database/, migrations/, policies/, rls/, audit/ plus platform Docker/Compose and READMEs (from PLATFORM_DIR or autodetected siblings).


Docs/Evidence: session logs, fix proofs, deploy checks (if present).


Security note: The scripts never move your originals. Redaction happens on copies only.